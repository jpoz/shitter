// Code generated by go-bindata.
// sources:
// shit.png
// DO NOT EDIT!

package shitter

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _shitPng = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x00\xde\x0e\x21\xf1\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x80\x00\x00\x00\x80\x08\x03\x00\x00\x00\xf4\xe0\x91\xf9\x00\x00\x02\xf4\x50\x4c\x54\x45\x00\x00\x00\x98\x5d\x4a\xa3\x63\x41\x7f\x4f\x39\xb3\x6e\x51\x84\x52\x3b\x82\x51\x3a\x83\x51\x3b\xa1\x63\x49\x97\x5d\x44\x98\x5d\x46\xa1\x67\x43\x9f\x63\x48\xaf\x6c\x4f\xae\x6b\x4f\x98\x5e\x45\x80\x50\x39\x86\x54\x3c\xb3\x6d\x51\x92\x59\x42\x8f\x58\x41\xad\x68\x4d\xae\x6c\x4e\x99\x5f\x45\x84\x52\x3b\x97\x5d\x44\x86\x54\x3c\x89\x55\x3d\x9c\x60\x46\x8a\x55\x3d\x81\x51\x3a\x99\x5f\x45\xb3\x6e\x51\x86\x53\x3c\xb3\x6e\x51\x99\x5e\x44\xb1\x6d\x50\x95\x5c\x44\xb4\x6e\x51\x88\x55\x3d\xa2\x65\x49\xa3\x63\x4a\x9a\x5f\x45\x99\x5f\x45\x86\x53\x3c\xa6\x66\x4a\x96\x5d\x43\x88\x54\x3d\x93\x5b\x43\xb3\x6e\x51\xa3\x65\x4a\xb2\x6d\x50\x8b\x59\x42\x8c\x57\x3f\xb3\x6e\x51\x9f\x62\x48\xb4\x6e\x51\x97\x5d\x44\x87\x55\x3d\xb3\x6e\x51\xa1\x64\x49\x88\x54\x3d\x99\x5f\x44\xa5\x66\x4b\xb3\x6e\x51\xa1\x63\x4a\x94\x5b\x43\xa6\x67\x4b\x90\x59\x42\x9b\x5f\x46\x99\x5f\x45\xb3\x6e\x51\xa8\x67\x4c\x9c\x60\x45\x89\x55\x3e\x8f\x5a\x40\x8a\x55\x3c\xb4\x6f\x52\xa5\x67\x4b\x8d\x57\x41\xa5\x67\x4b\xa0\x62\x49\xb3\x6f\x51\xb3\x6e\x51\x99\x5f\x45\x7d\x4e\x38\x1a\x16\x26\xa6\x67\x4b\x87\x54\x3e\xff\xff\xff\x94\x5b\x43\xc4\x92\x6e\xf4\x6c\x60\xe6\xeb\xef\x97\x5e\x44\xfd\xfd\xfe\x8e\x58\x41\x95\x5c\x43\x96\x5d\x44\x7e\x4e\x38\xf9\xfb\xfb\x8c\x57\x3f\xf1\xf4\xf6\xa4\x65\x4a\x92\x5b\x42\xf7\xf9\xfa\x9e\x61\x47\x7f\x4f\x39\xfb\xfc\xfc\xc3\x91\x6d\xa2\x64\x49\x8d\x58\x40\x8a\x55\x3f\x29\x1e\x29\xf4\xf7\xf8\xea\xef\xf2\xc2\x8f\x6c\xa7\x68\x4c\xab\x69\x4d\xa0\x63\x48\x90\x5a\x41\xf0\xf2\xf4\xe5\xe7\xea\x9b\x60\x46\x89\x55\x3f\xc0\x8c\x69\xb2\x6d\x50\xa8\x69\x4d\x9a\x5f\x46\x88\x55\x3e\xe8\xec\xf0\xdf\xde\xe1\xbe\x89\x68\xb6\x72\x55\xa8\x6b\x4f\x81\x50\x3c\x84\x52\x3b\x4f\x35\x33\x21\x1a\x27\x1d\x17\x26\xec\xf0\xf3\xb8\x7a\x5b\xab\x6d\x50\xb0\x6c\x4f\xa5\x66\x4a\x26\x1c\x28\xe2\xe2\xe4\xac\x74\x5b\xaa\x6f\x55\xad\x6b\x4e\x73\x49\x3b\xd7\xcb\xc7\xd5\xc6\xc1\xbd\x93\x81\xb7\x76\x57\x92\x5a\x42\xd2\xc3\xbf\xb0\xae\xb4\xcc\xb3\xa9\xc3\xa2\x95\x8c\x8a\x92\x6f\x6d\x77\xbb\x86\x64\xb7\x7f\x5f\x55\x52\x5e\xeb\x69\x5d\xaf\x74\x56\xc6\x5a\x53\xa5\x6e\x52\xb2\x52\x4e\x5d\x3d\x36\x40\x2b\x2f\x39\x28\x2d\x35\x24\x2d\x2e\x20\x2b\x1f\x1b\x2b\xd1\xd0\xd4\xdb\xd4\xd2\xd1\xc7\xc4\xd1\xbf\xb9\xce\xb9\xb2\xb0\x7c\x64\xbc\x81\x60\xb1\x79\x59\xa3\x6b\x4e\xe0\xdd\xdd\xda\xd7\xd8\xd5\xd1\xd1\xcc\xcb\xcf\xda\xd0\xcc\xb7\xb6\xbb\xcc\xb5\xad\xc7\xa7\x9a\xb9\x9f\x94\xb4\x83\x6e\xa3\x78\x66\xbe\x85\x63\xb9\x84\x62\x9d\x74\x62\xf1\x6b\x5f\xd9\x62\x59\xd8\x61\x59\xae\x71\x54\x4a\x47\x54\x45\x42\x4f\x9d\x4a\x49\x3c\x39\x46\x85\x53\x40\x34\x31\x3f\x6d\x46\x3a\x65\x41\x38\x58\x2e\x36\x58\x39\x35\x48\x2b\x31\x26\x22\x31\x34\x1f\x2d\x30\x22\x2b\xc8\xad\xa2\xc5\xaa\x9f\x93\x91\x99\xc3\x9e\x8f\xbf\x99\x8a\xb0\x8c\x7e\xb8\x8c\x78\xa9\x86\x78\xe4\xe4\xe6\xc5\xb3\xae\xa9\xa7\xad\x9f\x9d\xa4\x98\x96\x9d\x80\x7e\x87\x79\x77\x80\x5e\x5b\x67\xde\x63\x5a\xc7\x5a\x54\x99\x65\x4f\x90\x62\x4f\xa4\x4c\x4b\x9f\x4b\x4a\x9c\x49\x48\x8f\x44\x46\x87\x41\x43\x6a\x36\x3b\x66\x34\x3b\x66\x42\x39\x63\x33\x39\x2e\x2a\x39\xba\xa4\x9c\x94\x92\x9a\xb2\x90\x82\x98\x6f\x5c\x8e\x5c\x46\x61\x60\x49\xa8\x00\x00\x00\x53\x74\x52\x4e\x53\x00\x07\x04\xfd\xf6\xde\xf3\xed\xaa\x32\x16\x0b\x65\x3e\x35\xfa\xfa\xca\xae\x44\x28\x26\x1d\xef\xe6\xbe\xbd\x98\x6e\x4c\xf8\xe7\xe5\xc3\xb4\x9b\x97\x8d\x72\x6e\x56\x14\xf3\xd9\xd4\xd0\xcc\xb2\xa8\x86\x75\x63\x1c\xf7\xec\xbd\xbc\xac\xa8\xa2\x8f\x89\x81\x80\x57\x4d\x3e\xe7\xe0\xde\xd5\xd0\xbf\xa6\x7c\x66\x5c\x4a\xf5\xf0\xec\xe4\xd2\x77\x8e\x89\x9f\x00\x00\x0b\x46\x49\x44\x41\x54\x78\xda\xec\xd7\x4b\x6b\x13\x51\x14\x07\xf0\xdb\x92\x45\xb4\x36\x05\x35\x59\xb9\x28\x3e\x4a\xab\x28\x5a\xf1\x85\x82\x8a\x8a\x8a\xa8\xe8\x0d\xde\xc9\x19\x26\x35\x25\xa6\x36\x24\x41\xda\x3c\xd4\xd0\x44\x4b\xe2\xca\x36\x41\x0d\xd6\x52\xb5\x58\x71\x6b\x7d\x55\x5c\x28\x6a\x5b\x17\xba\x17\x14\xad\x22\xe8\xc6\x4f\xe0\xce\x33\x33\x77\xd2\x87\x95\x64\x72\xeb\x74\xe3\x0f\xba\x98\x61\xc8\x39\x3d\xe7\x3f\x33\x09\xf9\xef\x3f\x93\xaa\x6b\x37\x1c\xf3\x79\x77\x93\x79\xe2\xdc\x50\x4f\xe3\x00\x60\x27\xf3\xc2\xb1\x98\xa2\x20\x36\xb0\x83\xcc\x03\x17\x96\x57\xf9\xb0\x81\x05\xc4\x7a\x0d\x36\xaa\xd2\x36\x50\x47\x2c\x57\xb3\x98\x72\x79\x6c\x60\x1f\xb1\x9a\xeb\x38\x96\xce\xf6\x53\xd4\x86\x0d\x1c\x24\x16\xab\xdd\x4c\xb3\x23\x51\x59\x1e\xc3\x06\x22\xd8\x40\x23\xb1\xd6\x2e\x1b\x1d\x09\xcb\x68\x8c\x4f\x60\x21\xb1\x94\xc3\x96\xed\x92\x55\xe1\x2c\x36\x10\xc3\x06\xaa\x88\x95\x5c\xf5\xfd\x51\x59\x33\x42\x51\xce\xea\x09\xd4\xec\x37\xea\x47\xa9\x26\x09\xb0\x84\x58\x68\x71\x36\x2a\xeb\x7a\x8a\x0f\x82\x15\xc4\x3a\x1b\x69\x46\xd6\x65\x28\x97\x80\x3a\xeb\x42\xd0\xb4\xb9\x47\xe6\xb2\x94\x4b\x05\x61\x1b\xb1\xca\x4a\x6a\x2c\x60\x84\x4e\x8a\xf8\xac\x5a\x82\xcb\x66\x0c\x20\x4a\xa7\x2a\x24\xd6\x38\x88\x15\x56\xd2\xb1\x62\x02\xa7\x4b\xa5\x0f\x6c\x74\x92\x7f\xad\xc6\x66\x6c\xa0\x8b\xce\x66\xf3\xd6\xed\x1b\x1a\x76\x1d\xae\x75\x38\x5d\x4d\xff\x24\x97\x1b\x69\x56\xd6\xf5\xd3\xd2\x6c\xf5\xf5\xfb\xd5\x8e\x0e\x37\x91\xb9\xb2\x9c\xf6\xcb\x9a\x31\x6a\x4a\xfd\xf2\x86\x39\x89\x48\xb5\x8d\x37\x10\xcd\x52\xb3\xd8\x6a\xbb\x4b\xfc\x2d\x4c\x79\x03\x43\xd4\xbc\x08\xb4\xda\xab\x84\x23\x40\xb3\x3c\x81\xe6\xa5\xbc\x00\x75\x8b\x44\x6f\x42\x4a\xc3\xfc\x2d\x6c\x5e\x0c\xd0\x4e\x22\x42\xfd\x1e\xd8\x65\x3c\x02\xcc\x73\x03\xda\x21\x76\x13\x50\xfc\x2a\x54\x69\x7d\x4c\x81\x6a\x19\xa9\xdc\x56\x2a\xa4\x00\xaa\xba\x26\x91\x15\x88\xf1\x82\x6a\x8b\x48\x08\xc5\x04\x41\xe5\x73\x92\x4a\x35\x50\x31\x11\xd0\xd8\x05\x1e\x44\x62\xda\x40\xb3\x9a\x54\xaa\xca\x26\x3a\x01\x9d\x4b\xe0\x3e\x14\xcf\x00\x6a\x26\x95\xda\x45\x85\xb8\x41\x34\x04\x35\x42\x3b\x48\xf9\x00\x44\x6f\xc4\xed\x54\x40\x1a\xc4\x1b\x70\x50\x01\x17\x40\x64\x05\xe2\x31\x2c\x80\xa1\x99\xcc\xcb\x08\x92\x60\x70\x8a\xbd\x92\x2b\x94\x07\xc3\x6a\x22\xa2\xd6\x56\xe1\x02\x7c\x30\x07\x11\xa8\x6a\x3c\xc0\x0a\xb4\x12\x39\x2f\x18\xbc\xab\xaa\x2a\x2d\xdf\xbc\x87\xa1\x5c\x25\xf5\xdd\x50\xe4\x96\x4e\xad\xaf\x21\xe6\x55\x2f\xc2\xf2\xaa\x58\x4a\xa8\xfe\x85\x56\x49\x92\xce\xac\x20\x66\x39\xd7\x62\xed\x7b\x43\xe3\xe3\x6f\x59\x9c\x9a\x14\xf7\x42\x51\x6b\x9e\x9d\x92\xd0\xd1\x25\xc4\x94\x45\x47\x58\xef\x50\x54\x46\x19\x66\xb2\x83\x54\x04\x26\xf9\xf2\x8c\x05\x25\xcd\x7a\x62\xc2\x4a\xc6\x7a\xc2\xb2\xe6\x29\x33\xd7\x41\xdc\x0d\x53\xb4\x31\x74\x5a\xd2\xac\xab\x2e\x7b\xfd\x76\xd6\x9b\x91\x75\xe3\x8c\x99\xe9\x20\x17\x84\x29\x7c\x58\x1f\x45\x24\xdd\xde\x72\xb3\x68\x67\xf7\xc2\xb2\xae\x2b\xc6\x34\xf1\xb2\x92\x58\x48\xf8\x60\x0a\x2f\xe3\x4e\x1a\x1d\x90\xb2\x34\x4f\xd6\x8f\xf6\x32\x5d\xec\xf5\xcb\xc7\x7d\xd7\x1f\xdd\xfa\xd4\xf3\xf7\xdd\xc7\x92\x80\x7e\xfe\xfa\xf8\xf8\xe1\xa3\x6f\xaf\x46\x21\x99\x67\xdc\x05\x89\xdb\x46\xca\xe0\x88\xf5\x46\x65\xee\x1e\xd3\x5c\xfb\xf0\x4c\x31\x3c\xbf\x31\x6b\xf5\x74\xa2\x15\xd0\xd7\x87\x8a\xe1\xd9\x87\x6b\x8c\x8b\x48\xdc\xc5\x43\xa4\xb4\xb5\x2c\x23\x73\x3d\x4c\x95\xbe\x7d\x45\x99\xea\x79\x66\x46\xf1\x78\x5b\x50\x1f\xfd\x28\x2f\xcf\x5d\xb9\x1d\x63\xba\x33\x12\xb7\x89\x94\xd4\xc8\x9e\xca\xdc\x1d\xfd\xdf\x1f\x50\x66\x38\xff\x39\x5e\x48\xe5\x72\xb9\x42\x3c\x9d\x8f\x04\xdd\x60\x98\x38\xaf\xcc\x30\xc0\x87\x70\x56\x32\xac\x2a\x63\x00\x5d\x46\x00\xd3\x0c\x5d\x7d\xa0\xa0\xcb\x1d\xfe\x16\x8f\xa7\x25\xd4\x1e\xe8\x54\xd0\x2b\x98\xc5\x2b\x05\x75\x07\xda\x43\xea\x95\xfe\x8e\xcb\x0a\x7a\xa0\x77\x00\x92\x61\x53\x75\xa9\xb7\x1f\x7b\x2b\xeb\xc2\x5a\x00\x2f\x5d\xc7\x8f\x09\x84\x3c\x93\xda\xd5\x16\x26\xe0\x0f\x13\x78\xba\xb3\xdd\x33\x29\x14\xc0\x33\xd7\x2f\x31\xe4\x93\x8a\x4a\xfd\x58\xdd\xc1\x86\xa6\x05\xf0\x16\x7e\xaa\xdf\x33\x5d\x47\xb7\x72\x7e\x14\x66\x78\x83\xf3\xef\xf0\x4c\xe7\xc7\x5e\x6f\x31\xe4\x95\x8a\xd6\x95\x1b\xc1\x21\xa6\x7a\x82\xd3\x6f\xf1\xe8\xce\xdd\x1c\xfc\xf1\x7d\x58\x3d\xf2\x77\x2b\x7d\x89\x44\xd2\xeb\x03\xae\xd5\x9d\xec\x53\xba\xd5\x46\x5b\x86\xbf\xff\x18\xbc\x79\xce\xa3\x6b\xc1\x3d\x3c\xe1\x0d\x94\x17\xc3\x85\x8c\x85\x79\x00\x35\x03\x4a\x27\xaf\xef\x1f\x7c\x7f\x42\xf5\x6e\x58\x3d\x50\x94\x2f\x0c\xe5\xd5\xbf\x36\x86\xbe\x28\x8a\x5a\x7f\xf8\x9d\x76\xd1\xfb\x41\x3f\xef\xa0\x53\x19\xe0\x2b\x30\x2c\x2d\x11\x81\x4b\x3c\x80\xc6\x00\x42\x7c\xec\x77\x4f\x70\xf7\x5f\xe0\x61\x40\xe9\x63\x9c\xd1\x69\x00\x4f\xbf\xb8\x6f\x5c\x75\x97\xaf\x23\xa4\x8d\xe0\xb4\x54\x6e\x08\x1a\xd9\x6f\xca\xeb\x24\xc4\x89\x20\x0a\x00\x68\x8b\xa8\x08\x82\x82\x88\xbb\x22\x22\x82\x82\x5e\x3c\x2b\x7a\x10\x04\x0f\x1e\x7e\x75\x75\x84\xa4\x93\x98\x98\x18\x83\x49\x0c\x92\x55\x26\x8b\x04\x47\x07\xd1\x44\x1c\x87\xb8\xcd\x30\xc8\xa0\xa3\xe2\x86\xe3\xb8\x8c\x0b\x78\xd0\x61\x46\x45\xc5\x15\x57\x50\xd0\xb3\x8a\x5e\xec\xea\xa4\x32\xf5\xbb\x4d\x3a\x79\xb7\xf4\xa1\xea\xe7\xff\xdf\xbf\xaa\x0f\xf0\x06\x64\x4e\xb2\x65\x75\xdd\x72\xcd\x05\x2d\x07\x6a\x2e\x79\x98\x0a\x0e\x27\x73\x5a\xa6\x06\xb5\xfd\xb9\x6e\x1b\xc3\x42\x3d\x49\xd9\x89\xdc\xe4\x8b\x38\x8f\x16\xd8\xfe\x0f\x69\x45\xa7\xbd\x5a\x80\x9b\xb2\xa0\x57\x5f\xb7\x8b\x0a\xba\xf4\x48\x7b\x65\xc1\x4d\x9e\x82\x4e\x3e\x09\x9b\x39\x96\xd7\xd0\x36\xed\x04\xe0\xfb\xd3\x7c\x07\x4a\x00\x97\x67\x5d\x70\x87\x0a\xee\xb0\x0e\xc8\xcb\x9c\x98\x82\x68\x9e\x82\x22\x98\x6d\x11\x00\xed\xe9\x39\x40\xab\x0a\xb5\x0a\x8c\xc8\xa2\xcf\xda\x93\xdc\x10\x15\x9c\xb0\x6b\x8f\x3e\xcb\xa2\x91\x5a\x0d\xda\x42\xcd\x07\x30\x85\x8a\x4a\xb5\x37\xfb\x85\x2c\x7a\xc3\xfe\xd8\x65\x2a\xb8\x1c\xd5\x1e\xfd\x96\x45\x2f\xf8\xd4\xb0\xf7\x29\xcd\x97\x60\x2d\x15\x1d\xb0\xf3\xc9\xf6\x58\x16\x7d\xd1\x9e\x74\x5c\xa1\x82\x21\x56\xab\x2f\xb2\xe8\x31\x9f\x9c\xf6\xbf\x0a\x67\xdd\x84\x33\x28\x52\xe4\x01\x7c\x93\x8d\xfd\xd5\xf1\x9a\x0a\x5e\x77\xa0\x4e\x65\xbe\xf1\x00\x8a\x0a\xb2\x4e\x6a\x64\xdd\x26\x2a\xba\xc8\x4b\x70\x1c\xfd\xb7\x20\xeb\x81\x77\x54\xf0\x2e\xc7\x1a\x1e\xe5\xe9\x38\x2f\xc1\x0d\x45\x14\x9e\x5b\x7f\x12\x8d\x9b\xb2\x1c\x62\x54\xf4\x8a\x37\x61\x70\xd8\xb8\xb4\xbd\x84\xbb\xc5\x18\xe6\x70\x90\x37\xe1\x2f\x45\x14\x22\xdb\x27\xcc\x97\xfe\x6b\xfa\x42\x00\x48\x51\xd1\xbd\xa8\xad\x2a\xff\x53\xe6\xbe\xea\xc7\xc1\x2d\x8a\xdc\xd2\x67\xef\x57\x99\xfb\x99\xb7\x55\x45\x1f\x28\xa2\xbd\x84\x90\x2d\x8b\xc6\x49\x66\xf3\xa6\x02\xb3\x83\x0a\x76\x0d\x06\x6b\x11\x3c\xaa\xce\xc1\x37\xaa\x7e\x32\xbd\xa5\xc8\xdb\x84\x3e\xfa\xdf\x54\x67\xe1\xa3\xda\xfe\x41\x5c\x01\x2f\xd1\x4d\x5a\x25\x19\xad\x06\x48\x5d\xdb\xb3\x3b\x85\x53\xd0\x95\xb0\x71\xea\xed\xee\xe1\x91\xde\x53\x1f\x2b\x3f\xae\x17\x28\x52\xb8\xae\xda\x98\x8f\xa7\x7a\x47\x86\xbb\x6f\xab\x36\x2e\xf1\x41\x11\x64\xf7\x92\x6a\x04\xe3\x8c\xf9\x07\x18\xd0\xae\x42\x7b\x00\x02\x28\x05\x9d\x2c\xb5\x66\x09\x34\x88\x51\xa8\x98\xe7\x92\x21\x01\xdc\x22\xc3\x31\xbc\x10\xfa\xd8\x39\xdc\x67\x2c\x42\xa9\xa8\xda\xcc\xb6\x9d\xa0\x26\x27\xb6\xd9\xcc\xd4\xe2\x0f\xd4\x81\x5b\x08\xb7\x65\xa3\x24\x5a\x02\x03\x6c\xff\x1e\x60\x7c\xa8\x0f\x73\xaa\x79\xff\xa3\x6d\xd4\xa4\xed\xa8\x39\x02\x35\x89\x3a\xd0\xbb\x9d\x8c\x99\x85\x5e\xc0\x99\x19\xfd\x22\x34\x00\x4c\x06\x47\xc0\xa7\x11\xa7\x6e\xbd\xc2\x1b\x00\x29\x5c\xd9\xaa\x1a\x02\xcd\x1b\xf7\x17\x6c\x99\x2c\x1e\x01\x70\x5a\xff\x10\x04\xc6\x54\x85\xa3\x09\x8f\xb0\xfd\xce\x24\xbf\xee\x9b\x9c\x4c\xee\x54\x85\xf2\x27\x8e\xa1\xfc\x3b\xcb\x04\x99\x23\x8d\x99\x0d\xbb\x2b\x09\xe0\x62\xa8\x13\xdf\x5f\x8c\x6e\xdd\xe6\x51\xd5\xa0\x67\x67\xc2\x3e\x54\xa2\x75\x95\x86\x92\x89\x9d\x9e\xa0\xaa\x7a\xb4\xfb\xfb\x8d\xfb\xa8\xff\xdd\xb0\x99\x20\x0b\x84\xcf\xe1\xa9\x31\xfd\x1e\x0a\x02\x47\xca\x27\x84\x70\xf5\x4e\xe7\x60\xd2\x5e\xbc\x78\xb9\xeb\x30\x6d\xc0\x17\xf8\xfe\xe1\xd3\x8d\xbc\x3d\x39\x78\xe9\xee\x1f\x3c\x81\x1d\x00\x6e\x82\x8d\xcd\x82\xc9\xd0\xc7\xee\x41\x31\x10\x64\x5c\x59\xa7\x23\xe0\x13\x13\x51\xa0\x8d\x1c\x0c\xb8\xf8\x57\x70\x5a\x31\x2a\x03\x98\x03\x58\x2a\xb4\x00\x0b\xe0\x1a\x18\xb0\xf5\xbc\x7e\x88\xf9\xa8\x05\x5f\x00\xfc\xce\xac\x82\xe1\xed\x75\x04\x5b\x29\x71\x8b\x61\x40\xbb\x88\x05\xc0\xc8\x11\xaf\xac\x9a\x0e\x95\x5d\x99\x40\x6c\x87\xcf\xb0\xaf\x2f\x96\x02\x97\xdf\x99\x56\x1a\x8a\x03\x47\xb0\x09\x42\x0f\x06\x2a\x33\xc8\x6c\x73\x18\x97\xd2\xeb\x0d\x69\x9c\x21\x6f\x38\xad\x34\x23\xec\x77\x00\xe7\x20\xd8\x24\x89\x5b\x01\xd0\x83\x0a\x80\x7a\x81\x27\xb7\x75\xd9\xb8\x23\x03\x63\x5c\x04\x9b\x28\x71\xcb\xa1\x31\x77\x39\xad\xb4\x2c\x1d\x77\x01\xe6\x27\xd8\x34\x89\x5b\x08\x96\x1c\x9b\x51\xa9\x2d\xa4\x9d\x2e\x30\x8b\x13\x6c\xbc\xc4\x2d\x83\x66\x64\xc0\xed\xb7\x8e\x22\xec\xf4\xbb\x79\xe2\x0d\xbc\x04\xdb\x2e\x71\x53\xa1\x05\x0e\xf7\x66\x7f\x3c\x14\x4e\x67\xf1\x7f\xf6\x3a\xe3\x65\xbf\xcb\x01\x0d\xec\x25\x06\xa8\x04\xcd\x72\x8f\x1e\x79\xfa\xac\xfd\xf9\xd9\x73\xe7\x23\x91\x43\xfb\xf6\xcb\xf2\xfe\x7d\x87\x0e\x45\xce\x9f\x3b\xfb\xbc\xfd\xd9\xd3\x23\xa3\x6e\xa8\x6f\x7b\xdd\x12\xac\x87\x66\x8c\x3e\x39\xd3\xde\x1f\x91\x2d\x44\xfa\xdb\xcf\x3c\x19\x05\x0c\xf7\xa0\xb9\x09\x67\x83\x35\xe5\xa5\xdc\x82\x97\x0a\x98\x84\x49\xdd\xd7\x70\x03\x58\xeb\x97\x5b\xd2\x6f\x51\x01\x7c\x25\x59\x0d\xd6\xfe\xb5\x5f\xf7\xae\x89\x04\x51\x00\xc0\x47\x97\x55\xd4\xc6\x45\xe1\x44\x4f\xc1\xca\x3b\x90\xb3\xb9\xe6\x04\x8b\x3b\xb8\x26\x77\xe5\x0c\x48\x58\x16\xdd\x41\x38\xd8\x42\xd3\xa5\x4d\xb5\x1a\xab\x34\x36\x57\x8b\xac\x12\xff\x0d\xb5\xb0\xc8\x17\xe6\x5f\x48\x20\xdf\x49\x7f\xbb\x6e\x3c\xf7\xd3\x97\xd5\xa4\xcb\x0f\xb6\x5a\xd8\x79\xcc\x9b\x9d\xf7\x5e\xdb\x5b\x00\x6d\x6c\x55\x27\x56\x9c\xa1\x1a\xc2\x0e\xbc\x05\x70\x80\xad\x64\x62\xb5\x85\xfe\xfb\x80\x41\x87\xde\x02\x38\xb4\x95\x56\x62\x63\x98\x0d\xbe\x61\xd0\xc0\x5b\x00\x03\x6c\x26\x4a\xc4\x7e\x06\x97\x3e\x61\xd0\xa9\xb7\x00\x4e\xa1\x4b\x48\xef\x09\x0d\xe5\x08\x22\x7b\x0b\x40\x86\x4e\x20\xa1\x71\x64\x6a\x8b\x41\x3b\xd6\x1b\xe7\xe9\x46\xe9\x4d\xba\xdd\x49\x4f\xb9\x79\xb2\xbd\xb4\x1c\x00\x4a\x6c\xf2\xe6\xc9\x1c\xbe\x8d\x5b\xc6\x05\x86\x77\xbd\x11\x6f\x30\xea\xdd\x0d\x8d\xef\x5b\x96\x32\x68\x47\xd3\xc8\xe4\x3b\x86\x54\xf6\x97\x47\x7c\xda\xe5\x6d\xba\xd3\xe5\x8f\xb2\x5f\x31\xad\x2f\x11\x60\x03\xf4\xbe\x10\xd2\x5f\x6c\xef\xd5\x88\x77\x34\xba\x5a\x64\xa2\x6f\xaa\xc2\x94\xd8\x45\xc3\xc8\x22\x02\x56\x24\x51\xff\xfc\xc9\x05\xef\xea\xe2\x44\x0f\x51\x34\x16\x11\xe2\x64\x0b\xd9\xc4\xc1\xdb\x48\xd6\x92\x70\xcb\xaf\x74\xab\x25\x40\x36\x94\x40\x99\x38\xe1\x90\x83\x10\x18\x41\x47\x2d\x08\x33\x85\x5f\x41\x99\xa9\x65\xa0\x83\x17\x84\x32\x71\xc4\xfa\xd1\x7a\x11\x3c\xce\x73\x30\xe1\x5d\x4c\xe6\x19\x78\x5c\x66\x5f\x22\x8e\x82\x3e\xe4\x2c\xf4\x13\xdc\x03\x2d\x0b\xed\x87\x1e\xef\xa0\xf7\xd0\xd6\xf6\xbf\x83\x75\x42\x5d\x22\xce\x12\x61\xe4\xe6\x33\xd8\x9a\xd4\xf4\xbe\xe0\xec\x7a\xcc\x9b\x8c\xaf\xcf\xf4\x3e\xa0\x86\xe7\xc4\x86\x44\x5c\x64\xfd\xc8\x1d\xdc\x1a\x08\xfd\xe7\xc2\x3c\xbb\x9f\x2a\x97\xe3\x6e\x77\x7c\xa9\x4c\xef\x67\xcf\x45\xb8\x2f\x60\x4d\xa5\x49\x89\x0b\x9a\x42\xab\x85\xbe\x60\x80\x78\xbc\xe3\xd2\x0e\x1e\x8b\x5a\x84\x95\xa6\x44\x5c\x05\x63\x08\xf4\x11\x3c\x8b\x42\xa7\x35\xb4\xae\x3e\x6c\x75\x04\x8c\xff\xd6\x9a\x64\x05\x29\x85\x5e\x22\x5e\xd8\xab\xfd\x11\xa0\x9b\xf9\xa8\x35\x38\x57\xfb\x72\xb5\x2b\x3f\x1f\xb4\x8e\x2a\x58\x1d\x9d\x9a\x94\xac\x42\xb9\x38\x7a\xa1\xaf\x49\x86\xca\xf3\x21\x07\x83\xb4\x79\xa9\x56\x96\x29\x01\x48\x5c\x08\x79\x10\x2e\x06\xf4\xa8\xe5\x66\xb9\xd1\xa8\x57\x76\xb7\xab\xa2\x28\x08\x02\x56\x9f\x6a\x75\x5b\x1d\x8e\x76\xd5\x19\x7d\xaf\xdc\xd4\x57\x06\x45\x93\x71\xe4\x55\x9a\x63\xc8\xeb\xa0\x6c\xce\x8f\xd6\xe1\xcf\x71\x19\xb2\x29\x86\x2d\x85\xd1\x06\x7e\x14\x13\xeb\x6f\x04\x0d\x66\x7f\xf9\xd1\xe6\x62\xa9\x7c\xc0\xf3\xda\x19\xb6\xf0\xdb\x87\x5e\x8f\x2f\x5d\x4a\xb2\x01\x86\x80\x28\x13\x60\xb3\xa9\x74\x04\xbd\x8d\x70\x3a\x97\x2a\x70\x6c\x22\x18\xc8\x44\x19\x46\xa2\x94\x4a\x4c\x34\x9a\x09\x04\x83\x09\x36\x9f\x2c\x96\x72\xb1\x08\x7a\xf7\xce\x93\x7f\xd3\x60\xa7\xdb\x4c\x74\xe0\x3f\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\xda\x06\x96\xb1\xde\x0e\x00\x00")

func shitPngBytes() ([]byte, error) {
	return bindataRead(
		_shitPng,
		"shit.png",
	)
}

func shitPng() (*asset, error) {
	bytes, err := shitPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shit.png", size: 3806, mode: os.FileMode(420), modTime: time.Unix(1507135818, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"shit.png": shitPng,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"shit.png": &bintree{shitPng, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
